<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Description</key>
	<string>Imports the latest version of Server App into Munki.</string>
	<key>Identifier</key>
	<string>com.github.jaharmi.munki.ServerApp</string>
	<key>Input</key>
	<dict>
	    <key>PRODUCT_NAME</key>
	    <string>macOS Server</string>
	    <key>PKG_NAME</key>
	    <string>ServerApp</string>
	    <key>PKG</key>
	    <string>AppleServer.pkg</string>
		<key>MUNKI_REPO_SUBDIR</key>
		<string>apple</string>
		<key>NAME</key>
		<string>apple_server</string>
		<key>pkginfo</key>
		<dict>
			<key>catalogs</key>
			<array>
				<string>testing</string>
			</array>
			<key>description</key>
			<string>%PRODCT_NAME% makes it easy to share files, schedule meetings, synchronize contacts, develop software, host your own website, publish wikis, configure Mac, iPhone, and iPad devices, remotely access your network, and more.

%PRODCT_NAME% is an application you can add to macOS. Anyone can quickly and easily turn a Mac into a server that's perfect for home offices, businesses, schools, developers, and hobbyists alike.</string>
			<key>developer</key>
			<string>Apple</string>
			<key>display_name</key>
			<string>%PRODCT_NAME%</string>
			<key>name</key>
			<string>%NAME%</string>
			<key>unattended_install</key>
			<true/>
			<key>unattended_uninstall</key>
			<true/>
            <key>postinstall_script</key>
            <string>#!/bin/bash

# Server setup script used with permission
# Credit to @rtrouton
# https://gist.github.com/rtrouton/c09f8ed541d330c4c7d4

# This script is designed to automate the setup of OS X Server 5.0.3 and later
# by authorizing and using the 'server' tool within /Applications/Server.app to
# run the initial setup and configuration of OS X Server's services.

# Script will check for the existence of the 'server' setup tool. If the 'server' setup tool
# is not located where the script expects it to be, the script will exit.

if [[ ! -e "/Applications/Server.app/Contents/ServerRoot/usr/sbin/server" ]]; then
  echo "/Applications/Server.app/Contents/ServerRoot/usr/sbin/server is not available. Script will exit."
  exit 0
fi

# If the 'server' setup tool is located, script will proceed and run
# the initial setup and configuration of OS X Server's services.

if [[ -e "/Applications/Server.app/Contents/ServerRoot/usr/sbin/server" ]]; then

  serverdotapp_username=serverdotappuser
  serverdotapp_password=$(openssl rand -base64 32)
  serverdotapp_user_name="Server App User"
  serverdotapp_user_hint="No hint for you!"
  serverdotapp_user_shell=/usr/bin/false
  serverdotapp_user_group=20
  serverdotapp_user_image="/Library/User Pictures/Fun/Chalk.tif"

  create_temp_user() {

    # Generate UID for user by identifying the numerically highest UID
    # currently in use on this machine then setting the "userUID" value
    # to be one number higher.

    maxUID=$(/usr/bin/dscl . list /Users UniqueID | awk '{print $2}' | sort -ug | tail -1)
    userUID=$((maxUID+1))

	/usr/bin/dscl . create /Users/${serverdotapp_username}
	/usr/bin/dscl . passwd /Users/${serverdotapp_username} ${serverdotapp_password}
	/usr/bin/dscl . create /Users/${serverdotapp_username} UserShell ${serverdotapp_user_shell}
	/usr/bin/dscl . create /Users/${serverdotapp_username} UniqueID "$userUID"
	/usr/bin/dscl . create /Users/${serverdotapp_username} PrimaryGroupID ${serverdotapp_user_group}
	/usr/bin/dscl . create /Users/${serverdotapp_username} RealName "${serverdotapp_user_name}"
	/usr/bin/dscl . create /Users/${serverdotapp_username} Picture "${serverdotapp_user_image}"
	/usr/bin/dscl . create /Users/${serverdotapp_username} Hint "${serverdotapp_user_hint}"
  }

  promote_temp_user_to_admin() {
	/usr/sbin/dseditgroup -o edit -a $serverdotapp_username -t user admin
  }

  delete_temp_user() {
	/usr/bin/dscl . delete /Users/${serverdotapp_username}
  }

  # Create temporary user to authorize Server setup
  # and give admin rights to that temporary user

  create_temp_user
  promote_temp_user_to_admin

  # Export temporary user's username and password as environment values.
  # This export will allow these values to be used by the expect section

  export serverdotapp_setupadmin="$serverdotapp_username"
  export serverdotapp_setupadmin_password="$serverdotapp_password"

  # Accept the Server.app license and set up the server tools

/usr/bin/expect&lt;&lt;EOF
set timeout 300
spawn /Applications/Server.app/Contents/ServerRoot/usr/sbin/server setup
puts "$serverdotapp_setupadmin"
puts "$serverdotapp_setupadmin_password"

expect "Press Return to view the software license agreement." { send \r }
expect "Do you agree to the terms of the software license agreement? (y/N)" { send "y\r" }
expect "User name:" { send "$serverdotapp_setupadmin\r" }
expect "Password:" { send "$serverdotapp_setupadmin_password\r" }
expect "%"
EOF

  # Delete temporary user
  delete_temp_user

fi

exit 0
            </string>
		</dict>
	</dict>
	<key>MinimumVersion</key>
	<string>0.5.0</string>
	<key>Process</key>
	<array>
		<dict>
			<key>Processor</key>
			<string>PackageRequired</string>
		</dict>
        <dict>
            <key>Processor</key>
            <string>CodeSignatureVerifier</string>
            <key>Arguments</key>
            <dict>
                <key>input_path</key>
                <string>%PKG%</string>
                <key>expected_authority_names</key>
                <array>
                    <string>Apple Mac OS Installer Package Signing</string>
                    <string>Apple Worldwide Developer Relations Certification Authority</string>
                    <string>Apple Root CA</string>
                </array>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>EndOfCheckPhase</string>
        </dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>purge_destination</key>
				<true/>
				<key>destination_path</key>
                <string>%RECIPE_CACHE_DIR%/unpack</string>
				<key>flat_pkg_path</key>
				<string>%PKG%</string>
			</dict>
			<key>Processor</key>
			<string>FlatPkgUnpacker</string>
		</dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>url</key>
                <string>file://%RECIPE_CACHE_DIR%/unpack/Distribution</string>
				<key>re_pattern</key>
                <string>.os-version min="([\d\.]+)"</string>
                <key>result_output_var_name</key>
                <string>MINIMUM_OS_VERSION</string>
			</dict>
			<key>Processor</key>
			<string>URLTextSearcher</string>
		</dict>
        <dict>
            <key>Processor</key>
            <string>FileFinder</string>
            <key>Arguments</key>
            <dict>
                <key>pattern</key>
                <string>%RECIPE_CACHE_DIR%/unpack/%PKG_NAME%*.pkg/Payload</string>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>PkgPayloadUnpacker</string>
            <key>Arguments</key>
            <dict>
                <key>pkg_payload_path</key>
                <string>%found_filename%</string>
                <key>destination_path</key>
                <string>%RECIPE_CACHE_DIR%/unpack/%PKG_NAME%</string>
                <key>purge_destination</key>
                <true/>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>CodeSignatureVerifier</string>
            <key>Arguments</key>
            <dict>
                <key>input_path</key>
                <string>%RECIPE_CACHE_DIR%/unpack/%PKG_NAME%/Applications/Server.app</string>
                <key>requirement</key>
                <string>(anchor apple generic and certificate leaf[field.1.2.840.113635.100.6.1.9] /* exists */ or anchor apple) and identifier "com.apple.Server.v4"</string>
                <key>expected_authority_names</key>
                <array>
                    <string>Apple Mac OS Application Signing</string>
                    <string>Apple Worldwide Developer Relations Certification Authority</string>
                    <string>Apple Root CA</string>
                </array>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>Versioner</string>
            <key>Arguments</key>
            <dict>
                <key>input_plist_path</key>
                <string>%RECIPE_CACHE_DIR%/unpack/%PKG_NAME%/Applications/Server.app/Contents/Info.plist</string>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>MunkiInstallsItemsCreator</string>
            <key>Arguments</key>
            <dict>
                <key>faux_root</key>
                <string>%RECIPE_CACHE_DIR%/unpack/%PKG_NAME%</string>
                <key>installs_item_paths</key>
                <array>
                    <string>/Applications/Server.app</string>
                </array>
                <key>version_comparison_key</key>
                <string>CFBundleShortVersionString</string>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>MunkiPkginfoMerger</string>
            <key>Arguments</key>
            <dict/>
        </dict>
        <dict>
            <key>Processor</key>
            <string>PathDeleter</string>
            <key>Arguments</key>
            <dict>
                <key>path_list</key>
                <array>
                	<string>%RECIPE_CACHE_DIR%/unpack</string>
                </array>
            </dict>
        </dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>pkg_path</key>
                <string>%PKG%</string>
				<key>repo_subdirectory</key>
				<string>%MUNKI_REPO_SUBDIR%</string>
				<key>additional_makepkginfo_options</key>
				<array>
					<string>--minimum_os_version=%MINIMUM_OS_VERSION%</string>
                    <string>--pkgvers=%version%</string>
				</array>
			</dict>
			<key>Processor</key>
			<string>MunkiImporter</string>
		</dict>
	</array>
</dict>
</plist>
